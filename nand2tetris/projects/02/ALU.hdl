// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    Mux16(a = x, b = false, sel = zx, out = mux1);
    Not16(in = mux1, out = notmux1);
    Mux16(a = mux1, b = notmux1, sel = nx, out = groupmux1);

    Mux16(a = y, b = false, sel = zy, out = mux2);
    Not16(in = mux2, out = notmux2);
    Mux16(a = mux2, b = notmux2, sel = ny, out = groupmux2);

    And16(a = groupmux1, b = groupmux2, out = groupmux12);
    Add16(a = groupmux1, b = groupmux2, out = sumgroupmux12);
    Mux16(a = groupmux12, b = sumgroupmux12, sel = f, out = groupmux3);

    Not16(in = groupmux3, out = notgroupmux3);
    Mux16(a = groupmux3, b = notgroupmux3, sel = no, out = out, out[0] = put0, out[1] = put1, out[2] = put2, out[3] = put3, out[4] = put4, out[5] = put5, out[6] = put6, out[7] = put7, out[8] = put8, out[9] = put9, out[10] = put10, out[11] = put11, out[12] = put12, out[13] = put13, out[14] = put14, out[15] = put15, out[15] = ng);

    Or(a = put0, b = put1, out = or12);
    Or(a = put2, b = put3, out = or23);

    Or(a = put4, b = put5, out = or45);
    Or(a = put6, b = put7, out = or67);

    Or(a = put8, b = put9, out = or89);
    Or(a = put10, b = put11, out = or1011);

    Or(a = put12, b = put13, out = or1213);
    Or(a = put14, b = put15, out = or1415);

    Or(a = or12, b = or23, out = orab);
    Or(a = or45, b = or67, out = orcd);

    Or(a = or89, b = or1011, out = oref);
    Or(a = or1213, b = or1415, out = orgh);

    Or(a = orab, b = orcd , out = orx);
    Or(a = oref, b = orgh, out = ory);

    Or(a = orx, b = ory, out = orz);

    Not(in = orz, out = zr);
    

}